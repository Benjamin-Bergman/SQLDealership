@startuml
class Program {
+ {static} void main()
}
class DealershipUI {
- Dealership
- Scanner
- SimpleList<Contract>
- PrintStream
+ DealershipUI(...)
+ void display()
}
interface Dealership {
+ {abstract} String getPhone()
+ {abstract} String getAddress()
+ {abstract} String getDisplayName()
+ {abstract} List<Vehicle> getAllVehicles()
+ {abstract} void add(Vehicle)
+ {abstract} void addAll(Collection<Vehicle>)
+ {abstract} boolean remove(Vehicle)
+ {abstract} void clear()
}
class BasicDealership {
- String displayName
- String address
- String phone
- List<Vehicle> inventory
__
+ BasicDealership(String, String, String)
..
+ {abstract} {method} overrides
}
class ResourceBackedDealership Implements Dealership {
- File filePath
- Dealership wrapped
- String displayName
- String address
- String phone
__
+ ResourceBackedDealership(Dealership, Supplier<Reader>, Function<Boolean, Writer>)
..
+ {abstract} {method} overrides
}
class Vehicle << (R,orange) >> {
- int vin
- int year
- String make
- String model
- String vehicleType
- String color
- int odometer
- double price
__
+ String toString()
..
+ {abstract} {method} simple getters
}
class VehicleFilters {
+ {static} Predicate<Vehicle> minPrice(double)
+ {static} Predicate<Vehicle> minYear(double)
+ {static} Predicate<Vehicle> make(String)
+ {static} Predicate<Vehicle> model(String)
+ {static} Predicate<Vehicle> minYear(double)
+ {static} Predicate<Vehicle> maxYear(double)
+ {static} Predicate<Vehicle> color(String)
+ {static} Predicate<Vehicle> minOdometer(double)
+ {static} Predicate<Vehicle> maxOdometer(double)
+ {static} Predicate<Vehicle> type(String)
+ {static} Predicate<Vehicle> vin(int)
+ {static} Predicate<Vehicle> available(Iterable<? extends Contract>)
+ {static} Predicate<Vehicle> all()
}

interface SimpleList<T> {
void add(T)
boolean remove(T)
}
class FileBackedContractList<Contract> implements SimpleList {
    - File file
    - List<Contract> contracts
    __
    + FileBackedContractList(File)
    ..
    + {abstract} {method} overrides
}
interface Contract {
    + {abstract} double  getTotalPrice()
    + {abstract} double  getMonthlyPayment()
    + {abstract} int     getPaymentLength()
    + {abstract} Vehicle getVehicleSold()
   }
abstract class BaseContract implements Contract {
- Vehicle vehicleSold;
- LocalDate date;
- String email;
- String customerName;
__
# BaseContract(Vehicle, String, String)
# BaseContract(Vehicle, String, String, LocalDate)
+ LocalDate getDate()
+ String getEmail()
+ String getCustomerName(
..
+ Vehicle getVehicleSold()
}
class SalesContract extends BaseContract {
- double salesTax
- double recordingFee
- double processingFee
- boolean financed
__
+ LeaseContract(..., double, double, double, boolean)
+ LeaseContract(..., double, double, double, boolean)
+ double  getSalesTax()
+ double  getRecordingFee()
+ double  getProcessingFee()
+ boolean getFinanced()
..
+ double  getTotalPrice()
+ double  getMonthlyPayment()
+ int     getPaymentLength()
}
class LeaseContract extends BaseContract {
- double expectedEndingValue
- double leaseFee
__
+ LeaseContract(..., double, double)
+ LeaseContract(..., double, double)
+ double getExpectedEndingValue()
+ double getLeaseFee()
..
+ double  getTotalPrice()
+ double  getMonthlyPayment()
+ int     getPaymentLength()
}
class Contracts {
+ {static} String makeCSV(Contract)
+ {static} Contract fromCSV(String)
}

together {
    interface Dealership
    class BasicDealership
    class ResourceBackedDealership
    class Vehicle
}

together {
    interface Contract
    abstract BaseContract
    class LeaseContract
    class SalesContract
}

Dealership *-- ResourceBackedDealership
Vehicle o-r- Dealership
DealershipUI <-u- Program
Dealership o-l- DealershipUI
SimpleList o-- DealershipUI
VehicleFilters <-u- DealershipUI
Dealership <|.r. BasicDealership
Contract o-- FileBackedContractList
Contracts <-u- FileBackedContractList
Contracts --> SalesContract
Contracts --> LeaseContract
Vehicle <-- VehicleFilters

legend top right
Arrows with a solid head indicate direct usage.
endlegend

note top of BaseContract: Package Private
note right of Program: Package Private\nDirectly instantiates many classes for dependency injection
@enduml